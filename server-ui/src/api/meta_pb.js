/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
/* eslint-disable */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.meta.GetDefaultPartitionIdRequest', null, global);
goog.exportSymbol('proto.meta.GetDefaultPartitionIdResponse', null, global);
goog.exportSymbol('proto.meta.GetSchemaRequest', null, global);
goog.exportSymbol('proto.meta.GetSchemaResponse', null, global);
goog.exportSymbol('proto.meta.Key', null, global);
goog.exportSymbol('proto.meta.MetaCreateEntityRequest', null, global);
goog.exportSymbol('proto.meta.MetaCreateEntityResponse', null, global);
goog.exportSymbol('proto.meta.MetaDeleteEntityRequest', null, global);
goog.exportSymbol('proto.meta.MetaDeleteEntityResponse', null, global);
goog.exportSymbol('proto.meta.MetaEntity', null, global);
goog.exportSymbol('proto.meta.MetaGetEntityRequest', null, global);
goog.exportSymbol('proto.meta.MetaGetEntityResponse', null, global);
goog.exportSymbol('proto.meta.MetaListEntitiesRequest', null, global);
goog.exportSymbol('proto.meta.MetaListEntitiesResponse', null, global);
goog.exportSymbol('proto.meta.MetaUpdateEntityRequest', null, global);
goog.exportSymbol('proto.meta.MetaUpdateEntityResponse', null, global);
goog.exportSymbol('proto.meta.PartitionId', null, global);
goog.exportSymbol('proto.meta.PathElement', null, global);
goog.exportSymbol('proto.meta.Schema', null, global);
goog.exportSymbol('proto.meta.SchemaComputedIndex', null, global);
goog.exportSymbol('proto.meta.SchemaComputedIndexFnv64a', null, global);
goog.exportSymbol('proto.meta.SchemaComputedIndexFnv64aPair', null, global);
goog.exportSymbol('proto.meta.SchemaField', null, global);
goog.exportSymbol('proto.meta.SchemaFieldEditorInfo', null, global);
goog.exportSymbol('proto.meta.SchemaFieldEditorInfoType', null, global);
goog.exportSymbol('proto.meta.SchemaIndex', null, global);
goog.exportSymbol('proto.meta.SchemaIndexType', null, global);
goog.exportSymbol('proto.meta.SchemaKind', null, global);
goog.exportSymbol('proto.meta.SchemaKindEditor', null, global);
goog.exportSymbol('proto.meta.Value', null, global);
goog.exportSymbol('proto.meta.ValueType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.PartitionId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.PartitionId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.PartitionId.displayName = 'proto.meta.PartitionId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.PartitionId.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.PartitionId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.PartitionId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.PartitionId.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.PartitionId}
 */
proto.meta.PartitionId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.PartitionId;
  return proto.meta.PartitionId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.PartitionId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.PartitionId}
 */
proto.meta.PartitionId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.PartitionId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.PartitionId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.PartitionId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.PartitionId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.meta.PartitionId.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.PartitionId.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.PathElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.meta.PathElement.oneofGroups_);
};
goog.inherits(proto.meta.PathElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.PathElement.displayName = 'proto.meta.PathElement';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.meta.PathElement.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.meta.PathElement.IdtypeCase = {
  IDTYPE_NOT_SET: 0,
  ID: 2,
  NAME: 3
};

/**
 * @return {proto.meta.PathElement.IdtypeCase}
 */
proto.meta.PathElement.prototype.getIdtypeCase = function() {
  return /** @type {proto.meta.PathElement.IdtypeCase} */(jspb.Message.computeOneofCase(this, proto.meta.PathElement.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.PathElement.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.PathElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.PathElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.PathElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.PathElement}
 */
proto.meta.PathElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.PathElement;
  return proto.meta.PathElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.PathElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.PathElement}
 */
proto.meta.PathElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.PathElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.PathElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.PathElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.PathElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string kind = 1;
 * @return {string}
 */
proto.meta.PathElement.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.PathElement.prototype.setKind = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.meta.PathElement.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.meta.PathElement.prototype.setId = function(value) {
  jspb.Message.setOneofField(this, 2, proto.meta.PathElement.oneofGroups_[0], value);
};


proto.meta.PathElement.prototype.clearId = function() {
  jspb.Message.setOneofField(this, 2, proto.meta.PathElement.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.PathElement.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.meta.PathElement.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meta.PathElement.prototype.setName = function(value) {
  jspb.Message.setOneofField(this, 3, proto.meta.PathElement.oneofGroups_[0], value);
};


proto.meta.PathElement.prototype.clearName = function() {
  jspb.Message.setOneofField(this, 3, proto.meta.PathElement.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.PathElement.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.Key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meta.Key.repeatedFields_, null);
};
goog.inherits(proto.meta.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.Key.displayName = 'proto.meta.Key';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meta.Key.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.Key.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.Key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.Key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Key.toObject = function(includeInstance, msg) {
  var f, obj = {
    partitionid: (f = msg.getPartitionid()) && proto.meta.PartitionId.toObject(includeInstance, f),
    pathList: jspb.Message.toObjectList(msg.getPathList(),
    proto.meta.PathElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.Key}
 */
proto.meta.Key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.Key;
  return proto.meta.Key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.Key}
 */
proto.meta.Key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.PartitionId;
      reader.readMessage(value,proto.meta.PartitionId.deserializeBinaryFromReader);
      msg.setPartitionid(value);
      break;
    case 2:
      var value = new proto.meta.PathElement;
      reader.readMessage(value,proto.meta.PathElement.deserializeBinaryFromReader);
      msg.addPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.Key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartitionid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.PartitionId.serializeBinaryToWriter
    );
  }
  f = message.getPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.meta.PathElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional PartitionId partitionId = 1;
 * @return {?proto.meta.PartitionId}
 */
proto.meta.Key.prototype.getPartitionid = function() {
  return /** @type{?proto.meta.PartitionId} */ (
    jspb.Message.getWrapperField(this, proto.meta.PartitionId, 1));
};


/** @param {?proto.meta.PartitionId|undefined} value */
proto.meta.Key.prototype.setPartitionid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.Key.prototype.clearPartitionid = function() {
  this.setPartitionid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.Key.prototype.hasPartitionid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PathElement path = 2;
 * @return {!Array<!proto.meta.PathElement>}
 */
proto.meta.Key.prototype.getPathList = function() {
  return /** @type{!Array<!proto.meta.PathElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meta.PathElement, 2));
};


/** @param {!Array<!proto.meta.PathElement>} value */
proto.meta.Key.prototype.setPathList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.meta.PathElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meta.PathElement}
 */
proto.meta.Key.prototype.addPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.meta.PathElement, opt_index);
};


proto.meta.Key.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.Value.displayName = 'proto.meta.Value';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    doublevalue: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    int64value: jspb.Message.getFieldWithDefault(msg, 4, 0),
    stringvalue: jspb.Message.getFieldWithDefault(msg, 5, ""),
    timestampvalue: msg.getTimestampvalue_asB64(),
    booleanvalue: jspb.Message.getFieldWithDefault(msg, 7, false),
    bytesvalue: msg.getBytesvalue_asB64(),
    keyvalue: (f = msg.getKeyvalue()) && proto.meta.Key.toObject(includeInstance, f),
    uint64value: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.Value}
 */
proto.meta.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.Value;
  return proto.meta.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.Value}
 */
proto.meta.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.meta.ValueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoublevalue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64value(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTimestampvalue(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBooleanvalue(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesvalue(value);
      break;
    case 9:
      var value = new proto.meta.Key;
      reader.readMessage(value,proto.meta.Key.deserializeBinaryFromReader);
      msg.setKeyvalue(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUint64value(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDoublevalue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getInt64value();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getStringvalue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTimestampvalue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBooleanvalue();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getBytesvalue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getKeyvalue();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.meta.Key.serializeBinaryToWriter
    );
  }
  f = message.getUint64value();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.meta.Value.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.meta.Value.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ValueType type = 2;
 * @return {!proto.meta.ValueType}
 */
proto.meta.Value.prototype.getType = function() {
  return /** @type {!proto.meta.ValueType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.meta.ValueType} value */
proto.meta.Value.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional double doubleValue = 3;
 * @return {number}
 */
proto.meta.Value.prototype.getDoublevalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.meta.Value.prototype.setDoublevalue = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int64 int64Value = 4;
 * @return {number}
 */
proto.meta.Value.prototype.getInt64value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.meta.Value.prototype.setInt64value = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string stringValue = 5;
 * @return {string}
 */
proto.meta.Value.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.meta.Value.prototype.setStringvalue = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes timestampValue = 6;
 * @return {!(string|Uint8Array)}
 */
proto.meta.Value.prototype.getTimestampvalue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes timestampValue = 6;
 * This is a type-conversion wrapper around `getTimestampvalue()`
 * @return {string}
 */
proto.meta.Value.prototype.getTimestampvalue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTimestampvalue()));
};


/**
 * optional bytes timestampValue = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTimestampvalue()`
 * @return {!Uint8Array}
 */
proto.meta.Value.prototype.getTimestampvalue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTimestampvalue()));
};


/** @param {!(string|Uint8Array)} value */
proto.meta.Value.prototype.setTimestampvalue = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bool booleanValue = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meta.Value.prototype.getBooleanvalue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.meta.Value.prototype.setBooleanvalue = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bytes bytesValue = 8;
 * @return {!(string|Uint8Array)}
 */
proto.meta.Value.prototype.getBytesvalue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes bytesValue = 8;
 * This is a type-conversion wrapper around `getBytesvalue()`
 * @return {string}
 */
proto.meta.Value.prototype.getBytesvalue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesvalue()));
};


/**
 * optional bytes bytesValue = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesvalue()`
 * @return {!Uint8Array}
 */
proto.meta.Value.prototype.getBytesvalue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesvalue()));
};


/** @param {!(string|Uint8Array)} value */
proto.meta.Value.prototype.setBytesvalue = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional Key keyValue = 9;
 * @return {?proto.meta.Key}
 */
proto.meta.Value.prototype.getKeyvalue = function() {
  return /** @type{?proto.meta.Key} */ (
    jspb.Message.getWrapperField(this, proto.meta.Key, 9));
};


/** @param {?proto.meta.Key|undefined} value */
proto.meta.Value.prototype.setKeyvalue = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.meta.Value.prototype.clearKeyvalue = function() {
  this.setKeyvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.Value.prototype.hasKeyvalue = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint64 uint64Value = 10;
 * @return {number}
 */
proto.meta.Value.prototype.getUint64value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.meta.Value.prototype.setUint64value = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.SchemaField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.SchemaField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.SchemaField.displayName = 'proto.meta.SchemaField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.SchemaField.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.SchemaField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.SchemaField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaField.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    comment: jspb.Message.getFieldWithDefault(msg, 4, ""),
    editor: (f = msg.getEditor()) && proto.meta.SchemaFieldEditorInfo.toObject(includeInstance, f),
    readonly: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.SchemaField}
 */
proto.meta.SchemaField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.SchemaField;
  return proto.meta.SchemaField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.SchemaField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.SchemaField}
 */
proto.meta.SchemaField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.meta.ValueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 5:
      var value = new proto.meta.SchemaFieldEditorInfo;
      reader.readMessage(value,proto.meta.SchemaFieldEditorInfo.deserializeBinaryFromReader);
      msg.setEditor(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadonly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.SchemaField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.SchemaField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.SchemaField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEditor();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.meta.SchemaFieldEditorInfo.serializeBinaryToWriter
    );
  }
  f = message.getReadonly();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.meta.SchemaField.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.meta.SchemaField.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.meta.SchemaField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meta.SchemaField.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ValueType type = 3;
 * @return {!proto.meta.ValueType}
 */
proto.meta.SchemaField.prototype.getType = function() {
  return /** @type {!proto.meta.ValueType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.meta.ValueType} value */
proto.meta.SchemaField.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string comment = 4;
 * @return {string}
 */
proto.meta.SchemaField.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.meta.SchemaField.prototype.setComment = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional SchemaFieldEditorInfo editor = 5;
 * @return {?proto.meta.SchemaFieldEditorInfo}
 */
proto.meta.SchemaField.prototype.getEditor = function() {
  return /** @type{?proto.meta.SchemaFieldEditorInfo} */ (
    jspb.Message.getWrapperField(this, proto.meta.SchemaFieldEditorInfo, 5));
};


/** @param {?proto.meta.SchemaFieldEditorInfo|undefined} value */
proto.meta.SchemaField.prototype.setEditor = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.meta.SchemaField.prototype.clearEditor = function() {
  this.setEditor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.SchemaField.prototype.hasEditor = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool readonly = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meta.SchemaField.prototype.getReadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.meta.SchemaField.prototype.setReadonly = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.SchemaFieldEditorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.SchemaFieldEditorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.SchemaFieldEditorInfo.displayName = 'proto.meta.SchemaFieldEditorInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.SchemaFieldEditorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.SchemaFieldEditorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.SchemaFieldEditorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaFieldEditorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    displayname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    editorreadonly: jspb.Message.getFieldWithDefault(msg, 3, false),
    foreigntype: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.SchemaFieldEditorInfo}
 */
proto.meta.SchemaFieldEditorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.SchemaFieldEditorInfo;
  return proto.meta.SchemaFieldEditorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.SchemaFieldEditorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.SchemaFieldEditorInfo}
 */
proto.meta.SchemaFieldEditorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayname(value);
      break;
    case 2:
      var value = /** @type {!proto.meta.SchemaFieldEditorInfoType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEditorreadonly(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setForeigntype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.SchemaFieldEditorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.SchemaFieldEditorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.SchemaFieldEditorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaFieldEditorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisplayname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getEditorreadonly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getForeigntype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string displayName = 1;
 * @return {string}
 */
proto.meta.SchemaFieldEditorInfo.prototype.getDisplayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.SchemaFieldEditorInfo.prototype.setDisplayname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SchemaFieldEditorInfoType type = 2;
 * @return {!proto.meta.SchemaFieldEditorInfoType}
 */
proto.meta.SchemaFieldEditorInfo.prototype.getType = function() {
  return /** @type {!proto.meta.SchemaFieldEditorInfoType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.meta.SchemaFieldEditorInfoType} value */
proto.meta.SchemaFieldEditorInfo.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool editorReadonly = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meta.SchemaFieldEditorInfo.prototype.getEditorreadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.meta.SchemaFieldEditorInfo.prototype.setEditorreadonly = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string foreignType = 4;
 * @return {string}
 */
proto.meta.SchemaFieldEditorInfo.prototype.getForeigntype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.meta.SchemaFieldEditorInfo.prototype.setForeigntype = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.SchemaKindEditor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.SchemaKindEditor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.SchemaKindEditor.displayName = 'proto.meta.SchemaKindEditor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.SchemaKindEditor.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.SchemaKindEditor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.SchemaKindEditor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaKindEditor.toObject = function(includeInstance, msg) {
  var f, obj = {
    singular: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plural: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.SchemaKindEditor}
 */
proto.meta.SchemaKindEditor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.SchemaKindEditor;
  return proto.meta.SchemaKindEditor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.SchemaKindEditor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.SchemaKindEditor}
 */
proto.meta.SchemaKindEditor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSingular(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlural(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.SchemaKindEditor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.SchemaKindEditor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.SchemaKindEditor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaKindEditor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSingular();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlural();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string singular = 1;
 * @return {string}
 */
proto.meta.SchemaKindEditor.prototype.getSingular = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.SchemaKindEditor.prototype.setSingular = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string plural = 2;
 * @return {string}
 */
proto.meta.SchemaKindEditor.prototype.getPlural = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meta.SchemaKindEditor.prototype.setPlural = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.SchemaKind = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meta.SchemaKind.repeatedFields_, null);
};
goog.inherits(proto.meta.SchemaKind, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.SchemaKind.displayName = 'proto.meta.SchemaKind';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meta.SchemaKind.repeatedFields_ = [2,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.SchemaKind.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.SchemaKind.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.SchemaKind} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaKind.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.meta.SchemaField.toObject, includeInstance),
    editor: (f = msg.getEditor()) && proto.meta.SchemaKindEditor.toObject(includeInstance, f),
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    proto.meta.SchemaIndex.toObject, includeInstance),
    ancestorsList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.SchemaKind}
 */
proto.meta.SchemaKind.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.SchemaKind;
  return proto.meta.SchemaKind.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.SchemaKind} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.SchemaKind}
 */
proto.meta.SchemaKind.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.meta.SchemaField;
      reader.readMessage(value,proto.meta.SchemaField.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    case 3:
      var value = new proto.meta.SchemaKindEditor;
      reader.readMessage(value,proto.meta.SchemaKindEditor.deserializeBinaryFromReader);
      msg.setEditor(value);
      break;
    case 4:
      var value = new proto.meta.SchemaIndex;
      reader.readMessage(value,proto.meta.SchemaIndex.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addAncestors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.SchemaKind.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.SchemaKind.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.SchemaKind} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaKind.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.meta.SchemaField.serializeBinaryToWriter
    );
  }
  f = message.getEditor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.meta.SchemaKindEditor.serializeBinaryToWriter
    );
  }
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.meta.SchemaIndex.serializeBinaryToWriter
    );
  }
  f = message.getAncestorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * repeated SchemaField fields = 2;
 * @return {!Array<!proto.meta.SchemaField>}
 */
proto.meta.SchemaKind.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.meta.SchemaField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meta.SchemaField, 2));
};


/** @param {!Array<!proto.meta.SchemaField>} value */
proto.meta.SchemaKind.prototype.setFieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.meta.SchemaField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meta.SchemaField}
 */
proto.meta.SchemaKind.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.meta.SchemaField, opt_index);
};


proto.meta.SchemaKind.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};


/**
 * optional SchemaKindEditor editor = 3;
 * @return {?proto.meta.SchemaKindEditor}
 */
proto.meta.SchemaKind.prototype.getEditor = function() {
  return /** @type{?proto.meta.SchemaKindEditor} */ (
    jspb.Message.getWrapperField(this, proto.meta.SchemaKindEditor, 3));
};


/** @param {?proto.meta.SchemaKindEditor|undefined} value */
proto.meta.SchemaKind.prototype.setEditor = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.meta.SchemaKind.prototype.clearEditor = function() {
  this.setEditor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.SchemaKind.prototype.hasEditor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated SchemaIndex indexes = 4;
 * @return {!Array<!proto.meta.SchemaIndex>}
 */
proto.meta.SchemaKind.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.meta.SchemaIndex>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meta.SchemaIndex, 4));
};


/** @param {!Array<!proto.meta.SchemaIndex>} value */
proto.meta.SchemaKind.prototype.setIndexesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.meta.SchemaIndex=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meta.SchemaIndex}
 */
proto.meta.SchemaKind.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.meta.SchemaIndex, opt_index);
};


proto.meta.SchemaKind.prototype.clearIndexesList = function() {
  this.setIndexesList([]);
};


/**
 * repeated string ancestors = 5;
 * @return {!Array<string>}
 */
proto.meta.SchemaKind.prototype.getAncestorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.meta.SchemaKind.prototype.setAncestorsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.meta.SchemaKind.prototype.addAncestors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.meta.SchemaKind.prototype.clearAncestorsList = function() {
  this.setAncestorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.SchemaIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.meta.SchemaIndex.oneofGroups_);
};
goog.inherits(proto.meta.SchemaIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.SchemaIndex.displayName = 'proto.meta.SchemaIndex';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.meta.SchemaIndex.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.meta.SchemaIndex.ValueCase = {
  VALUE_NOT_SET: 0,
  COMPUTED: 3,
  FIELD: 4
};

/**
 * @return {proto.meta.SchemaIndex.ValueCase}
 */
proto.meta.SchemaIndex.prototype.getValueCase = function() {
  return /** @type {proto.meta.SchemaIndex.ValueCase} */(jspb.Message.computeOneofCase(this, proto.meta.SchemaIndex.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.SchemaIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.SchemaIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.SchemaIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    computed: (f = msg.getComputed()) && proto.meta.SchemaComputedIndex.toObject(includeInstance, f),
    field: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.SchemaIndex}
 */
proto.meta.SchemaIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.SchemaIndex;
  return proto.meta.SchemaIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.SchemaIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.SchemaIndex}
 */
proto.meta.SchemaIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.meta.SchemaIndexType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.meta.SchemaComputedIndex;
      reader.readMessage(value,proto.meta.SchemaComputedIndex.deserializeBinaryFromReader);
      msg.setComputed(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.SchemaIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.SchemaIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.SchemaIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getComputed();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.meta.SchemaComputedIndex.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meta.SchemaIndex.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.SchemaIndex.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SchemaIndexType type = 2;
 * @return {!proto.meta.SchemaIndexType}
 */
proto.meta.SchemaIndex.prototype.getType = function() {
  return /** @type {!proto.meta.SchemaIndexType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.meta.SchemaIndexType} value */
proto.meta.SchemaIndex.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional SchemaComputedIndex computed = 3;
 * @return {?proto.meta.SchemaComputedIndex}
 */
proto.meta.SchemaIndex.prototype.getComputed = function() {
  return /** @type{?proto.meta.SchemaComputedIndex} */ (
    jspb.Message.getWrapperField(this, proto.meta.SchemaComputedIndex, 3));
};


/** @param {?proto.meta.SchemaComputedIndex|undefined} value */
proto.meta.SchemaIndex.prototype.setComputed = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.meta.SchemaIndex.oneofGroups_[0], value);
};


proto.meta.SchemaIndex.prototype.clearComputed = function() {
  this.setComputed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.SchemaIndex.prototype.hasComputed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string field = 4;
 * @return {string}
 */
proto.meta.SchemaIndex.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.meta.SchemaIndex.prototype.setField = function(value) {
  jspb.Message.setOneofField(this, 4, proto.meta.SchemaIndex.oneofGroups_[0], value);
};


proto.meta.SchemaIndex.prototype.clearField = function() {
  jspb.Message.setOneofField(this, 4, proto.meta.SchemaIndex.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.SchemaIndex.prototype.hasField = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.SchemaComputedIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.meta.SchemaComputedIndex.oneofGroups_);
};
goog.inherits(proto.meta.SchemaComputedIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.SchemaComputedIndex.displayName = 'proto.meta.SchemaComputedIndex';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.meta.SchemaComputedIndex.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.meta.SchemaComputedIndex.AlgorithmCase = {
  ALGORITHM_NOT_SET: 0,
  FNV64A: 1,
  FNV64A_PAIR: 2
};

/**
 * @return {proto.meta.SchemaComputedIndex.AlgorithmCase}
 */
proto.meta.SchemaComputedIndex.prototype.getAlgorithmCase = function() {
  return /** @type {proto.meta.SchemaComputedIndex.AlgorithmCase} */(jspb.Message.computeOneofCase(this, proto.meta.SchemaComputedIndex.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.SchemaComputedIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.SchemaComputedIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.SchemaComputedIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaComputedIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    fnv64a: (f = msg.getFnv64a()) && proto.meta.SchemaComputedIndexFnv64a.toObject(includeInstance, f),
    fnv64aPair: (f = msg.getFnv64aPair()) && proto.meta.SchemaComputedIndexFnv64aPair.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.SchemaComputedIndex}
 */
proto.meta.SchemaComputedIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.SchemaComputedIndex;
  return proto.meta.SchemaComputedIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.SchemaComputedIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.SchemaComputedIndex}
 */
proto.meta.SchemaComputedIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.SchemaComputedIndexFnv64a;
      reader.readMessage(value,proto.meta.SchemaComputedIndexFnv64a.deserializeBinaryFromReader);
      msg.setFnv64a(value);
      break;
    case 2:
      var value = new proto.meta.SchemaComputedIndexFnv64aPair;
      reader.readMessage(value,proto.meta.SchemaComputedIndexFnv64aPair.deserializeBinaryFromReader);
      msg.setFnv64aPair(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.SchemaComputedIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.SchemaComputedIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.SchemaComputedIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaComputedIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFnv64a();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.SchemaComputedIndexFnv64a.serializeBinaryToWriter
    );
  }
  f = message.getFnv64aPair();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.meta.SchemaComputedIndexFnv64aPair.serializeBinaryToWriter
    );
  }
};


/**
 * optional SchemaComputedIndexFnv64a fnv64a = 1;
 * @return {?proto.meta.SchemaComputedIndexFnv64a}
 */
proto.meta.SchemaComputedIndex.prototype.getFnv64a = function() {
  return /** @type{?proto.meta.SchemaComputedIndexFnv64a} */ (
    jspb.Message.getWrapperField(this, proto.meta.SchemaComputedIndexFnv64a, 1));
};


/** @param {?proto.meta.SchemaComputedIndexFnv64a|undefined} value */
proto.meta.SchemaComputedIndex.prototype.setFnv64a = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.meta.SchemaComputedIndex.oneofGroups_[0], value);
};


proto.meta.SchemaComputedIndex.prototype.clearFnv64a = function() {
  this.setFnv64a(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.SchemaComputedIndex.prototype.hasFnv64a = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SchemaComputedIndexFnv64aPair fnv64a_pair = 2;
 * @return {?proto.meta.SchemaComputedIndexFnv64aPair}
 */
proto.meta.SchemaComputedIndex.prototype.getFnv64aPair = function() {
  return /** @type{?proto.meta.SchemaComputedIndexFnv64aPair} */ (
    jspb.Message.getWrapperField(this, proto.meta.SchemaComputedIndexFnv64aPair, 2));
};


/** @param {?proto.meta.SchemaComputedIndexFnv64aPair|undefined} value */
proto.meta.SchemaComputedIndex.prototype.setFnv64aPair = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.meta.SchemaComputedIndex.oneofGroups_[0], value);
};


proto.meta.SchemaComputedIndex.prototype.clearFnv64aPair = function() {
  this.setFnv64aPair(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.SchemaComputedIndex.prototype.hasFnv64aPair = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.SchemaComputedIndexFnv64a = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.SchemaComputedIndexFnv64a, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.SchemaComputedIndexFnv64a.displayName = 'proto.meta.SchemaComputedIndexFnv64a';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.SchemaComputedIndexFnv64a.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.SchemaComputedIndexFnv64a.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.SchemaComputedIndexFnv64a} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaComputedIndexFnv64a.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.SchemaComputedIndexFnv64a}
 */
proto.meta.SchemaComputedIndexFnv64a.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.SchemaComputedIndexFnv64a;
  return proto.meta.SchemaComputedIndexFnv64a.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.SchemaComputedIndexFnv64a} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.SchemaComputedIndexFnv64a}
 */
proto.meta.SchemaComputedIndexFnv64a.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.SchemaComputedIndexFnv64a.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.SchemaComputedIndexFnv64a.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.SchemaComputedIndexFnv64a} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaComputedIndexFnv64a.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string field = 1;
 * @return {string}
 */
proto.meta.SchemaComputedIndexFnv64a.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.SchemaComputedIndexFnv64a.prototype.setField = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.SchemaComputedIndexFnv64aPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.SchemaComputedIndexFnv64aPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.SchemaComputedIndexFnv64aPair.displayName = 'proto.meta.SchemaComputedIndexFnv64aPair';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.SchemaComputedIndexFnv64aPair.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.SchemaComputedIndexFnv64aPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.SchemaComputedIndexFnv64aPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaComputedIndexFnv64aPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    field1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    field2: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.SchemaComputedIndexFnv64aPair}
 */
proto.meta.SchemaComputedIndexFnv64aPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.SchemaComputedIndexFnv64aPair;
  return proto.meta.SchemaComputedIndexFnv64aPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.SchemaComputedIndexFnv64aPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.SchemaComputedIndexFnv64aPair}
 */
proto.meta.SchemaComputedIndexFnv64aPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setField2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.SchemaComputedIndexFnv64aPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.SchemaComputedIndexFnv64aPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.SchemaComputedIndexFnv64aPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.SchemaComputedIndexFnv64aPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getField2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string field1 = 1;
 * @return {string}
 */
proto.meta.SchemaComputedIndexFnv64aPair.prototype.getField1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.SchemaComputedIndexFnv64aPair.prototype.setField1 = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string field2 = 2;
 * @return {string}
 */
proto.meta.SchemaComputedIndexFnv64aPair.prototype.getField2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meta.SchemaComputedIndexFnv64aPair.prototype.setField2 = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.Schema.displayName = 'proto.meta.Schema';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    kindsMap: (f = msg.getKindsMap()) ? f.toObject(includeInstance, proto.meta.SchemaKind.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.Schema}
 */
proto.meta.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.Schema;
  return proto.meta.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.Schema}
 */
proto.meta.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getKindsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.meta.SchemaKind.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKindsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.meta.SchemaKind.serializeBinaryToWriter);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meta.Schema.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.Schema.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, SchemaKind> kinds = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.meta.SchemaKind>}
 */
proto.meta.Schema.prototype.getKindsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.meta.SchemaKind>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.meta.SchemaKind));
};


proto.meta.Schema.prototype.clearKindsMap = function() {
  this.getKindsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.GetSchemaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.GetSchemaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.GetSchemaRequest.displayName = 'proto.meta.GetSchemaRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.GetSchemaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.GetSchemaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.GetSchemaRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.GetSchemaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.GetSchemaRequest}
 */
proto.meta.GetSchemaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.GetSchemaRequest;
  return proto.meta.GetSchemaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.GetSchemaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.GetSchemaRequest}
 */
proto.meta.GetSchemaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.GetSchemaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.GetSchemaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.GetSchemaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.GetSchemaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.GetSchemaResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.GetSchemaResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.GetSchemaResponse.displayName = 'proto.meta.GetSchemaResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.GetSchemaResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.GetSchemaResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.GetSchemaResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.GetSchemaResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    schema: (f = msg.getSchema()) && proto.meta.Schema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.GetSchemaResponse}
 */
proto.meta.GetSchemaResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.GetSchemaResponse;
  return proto.meta.GetSchemaResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.GetSchemaResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.GetSchemaResponse}
 */
proto.meta.GetSchemaResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.Schema;
      reader.readMessage(value,proto.meta.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.GetSchemaResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.GetSchemaResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.GetSchemaResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.GetSchemaResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.Schema.serializeBinaryToWriter
    );
  }
};


/**
 * optional Schema schema = 1;
 * @return {?proto.meta.Schema}
 */
proto.meta.GetSchemaResponse.prototype.getSchema = function() {
  return /** @type{?proto.meta.Schema} */ (
    jspb.Message.getWrapperField(this, proto.meta.Schema, 1));
};


/** @param {?proto.meta.Schema|undefined} value */
proto.meta.GetSchemaResponse.prototype.setSchema = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.GetSchemaResponse.prototype.clearSchema = function() {
  this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.GetSchemaResponse.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaListEntitiesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.MetaListEntitiesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaListEntitiesRequest.displayName = 'proto.meta.MetaListEntitiesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaListEntitiesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaListEntitiesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaListEntitiesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaListEntitiesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: msg.getStart_asB64(),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    kindname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaListEntitiesRequest}
 */
proto.meta.MetaListEntitiesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaListEntitiesRequest;
  return proto.meta.MetaListEntitiesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaListEntitiesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaListEntitiesRequest}
 */
proto.meta.MetaListEntitiesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKindname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaListEntitiesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaListEntitiesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaListEntitiesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaListEntitiesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getKindname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes start = 1;
 * @return {!(string|Uint8Array)}
 */
proto.meta.MetaListEntitiesRequest.prototype.getStart = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes start = 1;
 * This is a type-conversion wrapper around `getStart()`
 * @return {string}
 */
proto.meta.MetaListEntitiesRequest.prototype.getStart_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStart()));
};


/**
 * optional bytes start = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStart()`
 * @return {!Uint8Array}
 */
proto.meta.MetaListEntitiesRequest.prototype.getStart_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStart()));
};


/** @param {!(string|Uint8Array)} value */
proto.meta.MetaListEntitiesRequest.prototype.setStart = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.meta.MetaListEntitiesRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.meta.MetaListEntitiesRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string kindName = 3;
 * @return {string}
 */
proto.meta.MetaListEntitiesRequest.prototype.getKindname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meta.MetaListEntitiesRequest.prototype.setKindname = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaListEntitiesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meta.MetaListEntitiesResponse.repeatedFields_, null);
};
goog.inherits(proto.meta.MetaListEntitiesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaListEntitiesResponse.displayName = 'proto.meta.MetaListEntitiesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meta.MetaListEntitiesResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaListEntitiesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaListEntitiesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaListEntitiesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaListEntitiesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    next: msg.getNext_asB64(),
    moreresults: jspb.Message.getFieldWithDefault(msg, 2, false),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.meta.MetaEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaListEntitiesResponse}
 */
proto.meta.MetaListEntitiesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaListEntitiesResponse;
  return proto.meta.MetaListEntitiesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaListEntitiesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaListEntitiesResponse}
 */
proto.meta.MetaListEntitiesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNext(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMoreresults(value);
      break;
    case 3:
      var value = new proto.meta.MetaEntity;
      reader.readMessage(value,proto.meta.MetaEntity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaListEntitiesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaListEntitiesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaListEntitiesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaListEntitiesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMoreresults();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.meta.MetaEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes next = 1;
 * @return {!(string|Uint8Array)}
 */
proto.meta.MetaListEntitiesResponse.prototype.getNext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes next = 1;
 * This is a type-conversion wrapper around `getNext()`
 * @return {string}
 */
proto.meta.MetaListEntitiesResponse.prototype.getNext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNext()));
};


/**
 * optional bytes next = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNext()`
 * @return {!Uint8Array}
 */
proto.meta.MetaListEntitiesResponse.prototype.getNext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNext()));
};


/** @param {!(string|Uint8Array)} value */
proto.meta.MetaListEntitiesResponse.prototype.setNext = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool moreResults = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meta.MetaListEntitiesResponse.prototype.getMoreresults = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.meta.MetaListEntitiesResponse.prototype.setMoreresults = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated MetaEntity entities = 3;
 * @return {!Array<!proto.meta.MetaEntity>}
 */
proto.meta.MetaListEntitiesResponse.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.meta.MetaEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meta.MetaEntity, 3));
};


/** @param {!Array<!proto.meta.MetaEntity>} value */
proto.meta.MetaListEntitiesResponse.prototype.setEntitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.meta.MetaEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meta.MetaEntity}
 */
proto.meta.MetaListEntitiesResponse.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.meta.MetaEntity, opt_index);
};


proto.meta.MetaListEntitiesResponse.prototype.clearEntitiesList = function() {
  this.setEntitiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meta.MetaEntity.repeatedFields_, null);
};
goog.inherits(proto.meta.MetaEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaEntity.displayName = 'proto.meta.MetaEntity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meta.MetaEntity.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.meta.Key.toObject(includeInstance, f),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.meta.Value.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaEntity}
 */
proto.meta.MetaEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaEntity;
  return proto.meta.MetaEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaEntity}
 */
proto.meta.MetaEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.Key;
      reader.readMessage(value,proto.meta.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.meta.Value;
      reader.readMessage(value,proto.meta.Value.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.Key.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.meta.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Key key = 1;
 * @return {?proto.meta.Key}
 */
proto.meta.MetaEntity.prototype.getKey = function() {
  return /** @type{?proto.meta.Key} */ (
    jspb.Message.getWrapperField(this, proto.meta.Key, 1));
};


/** @param {?proto.meta.Key|undefined} value */
proto.meta.MetaEntity.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.MetaEntity.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.MetaEntity.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Value values = 2;
 * @return {!Array<!proto.meta.Value>}
 */
proto.meta.MetaEntity.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.meta.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meta.Value, 2));
};


/** @param {!Array<!proto.meta.Value>} value */
proto.meta.MetaEntity.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.meta.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meta.Value}
 */
proto.meta.MetaEntity.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.meta.Value, opt_index);
};


proto.meta.MetaEntity.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.GetDefaultPartitionIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.GetDefaultPartitionIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.GetDefaultPartitionIdRequest.displayName = 'proto.meta.GetDefaultPartitionIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.GetDefaultPartitionIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.GetDefaultPartitionIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.GetDefaultPartitionIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.GetDefaultPartitionIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.GetDefaultPartitionIdRequest}
 */
proto.meta.GetDefaultPartitionIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.GetDefaultPartitionIdRequest;
  return proto.meta.GetDefaultPartitionIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.GetDefaultPartitionIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.GetDefaultPartitionIdRequest}
 */
proto.meta.GetDefaultPartitionIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.GetDefaultPartitionIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.GetDefaultPartitionIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.GetDefaultPartitionIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.GetDefaultPartitionIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.GetDefaultPartitionIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.GetDefaultPartitionIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.GetDefaultPartitionIdResponse.displayName = 'proto.meta.GetDefaultPartitionIdResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.GetDefaultPartitionIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.GetDefaultPartitionIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.GetDefaultPartitionIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.GetDefaultPartitionIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.GetDefaultPartitionIdResponse}
 */
proto.meta.GetDefaultPartitionIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.GetDefaultPartitionIdResponse;
  return proto.meta.GetDefaultPartitionIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.GetDefaultPartitionIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.GetDefaultPartitionIdResponse}
 */
proto.meta.GetDefaultPartitionIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.GetDefaultPartitionIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.GetDefaultPartitionIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.GetDefaultPartitionIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.GetDefaultPartitionIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.meta.GetDefaultPartitionIdResponse.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.GetDefaultPartitionIdResponse.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaGetEntityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.MetaGetEntityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaGetEntityRequest.displayName = 'proto.meta.MetaGetEntityRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaGetEntityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaGetEntityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaGetEntityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaGetEntityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.meta.Key.toObject(includeInstance, f),
    kindname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaGetEntityRequest}
 */
proto.meta.MetaGetEntityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaGetEntityRequest;
  return proto.meta.MetaGetEntityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaGetEntityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaGetEntityRequest}
 */
proto.meta.MetaGetEntityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.Key;
      reader.readMessage(value,proto.meta.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKindname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaGetEntityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaGetEntityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaGetEntityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaGetEntityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.Key.serializeBinaryToWriter
    );
  }
  f = message.getKindname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Key key = 1;
 * @return {?proto.meta.Key}
 */
proto.meta.MetaGetEntityRequest.prototype.getKey = function() {
  return /** @type{?proto.meta.Key} */ (
    jspb.Message.getWrapperField(this, proto.meta.Key, 1));
};


/** @param {?proto.meta.Key|undefined} value */
proto.meta.MetaGetEntityRequest.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.MetaGetEntityRequest.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.MetaGetEntityRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string kindName = 2;
 * @return {string}
 */
proto.meta.MetaGetEntityRequest.prototype.getKindname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meta.MetaGetEntityRequest.prototype.setKindname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaGetEntityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.MetaGetEntityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaGetEntityResponse.displayName = 'proto.meta.MetaGetEntityResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaGetEntityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaGetEntityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaGetEntityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaGetEntityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && proto.meta.MetaEntity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaGetEntityResponse}
 */
proto.meta.MetaGetEntityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaGetEntityResponse;
  return proto.meta.MetaGetEntityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaGetEntityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaGetEntityResponse}
 */
proto.meta.MetaGetEntityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.MetaEntity;
      reader.readMessage(value,proto.meta.MetaEntity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaGetEntityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaGetEntityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaGetEntityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaGetEntityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.MetaEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetaEntity entity = 1;
 * @return {?proto.meta.MetaEntity}
 */
proto.meta.MetaGetEntityResponse.prototype.getEntity = function() {
  return /** @type{?proto.meta.MetaEntity} */ (
    jspb.Message.getWrapperField(this, proto.meta.MetaEntity, 1));
};


/** @param {?proto.meta.MetaEntity|undefined} value */
proto.meta.MetaGetEntityResponse.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.MetaGetEntityResponse.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.MetaGetEntityResponse.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaUpdateEntityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.MetaUpdateEntityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaUpdateEntityRequest.displayName = 'proto.meta.MetaUpdateEntityRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaUpdateEntityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaUpdateEntityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaUpdateEntityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaUpdateEntityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && proto.meta.MetaEntity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaUpdateEntityRequest}
 */
proto.meta.MetaUpdateEntityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaUpdateEntityRequest;
  return proto.meta.MetaUpdateEntityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaUpdateEntityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaUpdateEntityRequest}
 */
proto.meta.MetaUpdateEntityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.MetaEntity;
      reader.readMessage(value,proto.meta.MetaEntity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaUpdateEntityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaUpdateEntityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaUpdateEntityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaUpdateEntityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.MetaEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetaEntity entity = 1;
 * @return {?proto.meta.MetaEntity}
 */
proto.meta.MetaUpdateEntityRequest.prototype.getEntity = function() {
  return /** @type{?proto.meta.MetaEntity} */ (
    jspb.Message.getWrapperField(this, proto.meta.MetaEntity, 1));
};


/** @param {?proto.meta.MetaEntity|undefined} value */
proto.meta.MetaUpdateEntityRequest.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.MetaUpdateEntityRequest.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.MetaUpdateEntityRequest.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaUpdateEntityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.MetaUpdateEntityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaUpdateEntityResponse.displayName = 'proto.meta.MetaUpdateEntityResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaUpdateEntityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaUpdateEntityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaUpdateEntityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaUpdateEntityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && proto.meta.MetaEntity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaUpdateEntityResponse}
 */
proto.meta.MetaUpdateEntityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaUpdateEntityResponse;
  return proto.meta.MetaUpdateEntityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaUpdateEntityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaUpdateEntityResponse}
 */
proto.meta.MetaUpdateEntityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.MetaEntity;
      reader.readMessage(value,proto.meta.MetaEntity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaUpdateEntityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaUpdateEntityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaUpdateEntityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaUpdateEntityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.MetaEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetaEntity entity = 1;
 * @return {?proto.meta.MetaEntity}
 */
proto.meta.MetaUpdateEntityResponse.prototype.getEntity = function() {
  return /** @type{?proto.meta.MetaEntity} */ (
    jspb.Message.getWrapperField(this, proto.meta.MetaEntity, 1));
};


/** @param {?proto.meta.MetaEntity|undefined} value */
proto.meta.MetaUpdateEntityResponse.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.MetaUpdateEntityResponse.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.MetaUpdateEntityResponse.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaCreateEntityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.MetaCreateEntityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaCreateEntityRequest.displayName = 'proto.meta.MetaCreateEntityRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaCreateEntityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaCreateEntityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaCreateEntityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaCreateEntityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && proto.meta.MetaEntity.toObject(includeInstance, f),
    kindname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaCreateEntityRequest}
 */
proto.meta.MetaCreateEntityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaCreateEntityRequest;
  return proto.meta.MetaCreateEntityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaCreateEntityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaCreateEntityRequest}
 */
proto.meta.MetaCreateEntityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.MetaEntity;
      reader.readMessage(value,proto.meta.MetaEntity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKindname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaCreateEntityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaCreateEntityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaCreateEntityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaCreateEntityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.MetaEntity.serializeBinaryToWriter
    );
  }
  f = message.getKindname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional MetaEntity entity = 1;
 * @return {?proto.meta.MetaEntity}
 */
proto.meta.MetaCreateEntityRequest.prototype.getEntity = function() {
  return /** @type{?proto.meta.MetaEntity} */ (
    jspb.Message.getWrapperField(this, proto.meta.MetaEntity, 1));
};


/** @param {?proto.meta.MetaEntity|undefined} value */
proto.meta.MetaCreateEntityRequest.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.MetaCreateEntityRequest.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.MetaCreateEntityRequest.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string kindName = 2;
 * @return {string}
 */
proto.meta.MetaCreateEntityRequest.prototype.getKindname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meta.MetaCreateEntityRequest.prototype.setKindname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaCreateEntityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.MetaCreateEntityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaCreateEntityResponse.displayName = 'proto.meta.MetaCreateEntityResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaCreateEntityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaCreateEntityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaCreateEntityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaCreateEntityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && proto.meta.MetaEntity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaCreateEntityResponse}
 */
proto.meta.MetaCreateEntityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaCreateEntityResponse;
  return proto.meta.MetaCreateEntityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaCreateEntityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaCreateEntityResponse}
 */
proto.meta.MetaCreateEntityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.MetaEntity;
      reader.readMessage(value,proto.meta.MetaEntity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaCreateEntityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaCreateEntityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaCreateEntityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaCreateEntityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.MetaEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetaEntity entity = 1;
 * @return {?proto.meta.MetaEntity}
 */
proto.meta.MetaCreateEntityResponse.prototype.getEntity = function() {
  return /** @type{?proto.meta.MetaEntity} */ (
    jspb.Message.getWrapperField(this, proto.meta.MetaEntity, 1));
};


/** @param {?proto.meta.MetaEntity|undefined} value */
proto.meta.MetaCreateEntityResponse.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.MetaCreateEntityResponse.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.MetaCreateEntityResponse.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaDeleteEntityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.MetaDeleteEntityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaDeleteEntityRequest.displayName = 'proto.meta.MetaDeleteEntityRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaDeleteEntityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaDeleteEntityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaDeleteEntityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaDeleteEntityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.meta.Key.toObject(includeInstance, f),
    kindname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaDeleteEntityRequest}
 */
proto.meta.MetaDeleteEntityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaDeleteEntityRequest;
  return proto.meta.MetaDeleteEntityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaDeleteEntityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaDeleteEntityRequest}
 */
proto.meta.MetaDeleteEntityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.Key;
      reader.readMessage(value,proto.meta.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKindname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaDeleteEntityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaDeleteEntityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaDeleteEntityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaDeleteEntityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.Key.serializeBinaryToWriter
    );
  }
  f = message.getKindname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Key key = 1;
 * @return {?proto.meta.Key}
 */
proto.meta.MetaDeleteEntityRequest.prototype.getKey = function() {
  return /** @type{?proto.meta.Key} */ (
    jspb.Message.getWrapperField(this, proto.meta.Key, 1));
};


/** @param {?proto.meta.Key|undefined} value */
proto.meta.MetaDeleteEntityRequest.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.MetaDeleteEntityRequest.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.MetaDeleteEntityRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string kindName = 2;
 * @return {string}
 */
proto.meta.MetaDeleteEntityRequest.prototype.getKindname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meta.MetaDeleteEntityRequest.prototype.setKindname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaDeleteEntityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.MetaDeleteEntityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaDeleteEntityResponse.displayName = 'proto.meta.MetaDeleteEntityResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaDeleteEntityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaDeleteEntityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaDeleteEntityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaDeleteEntityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && proto.meta.MetaEntity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaDeleteEntityResponse}
 */
proto.meta.MetaDeleteEntityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaDeleteEntityResponse;
  return proto.meta.MetaDeleteEntityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaDeleteEntityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaDeleteEntityResponse}
 */
proto.meta.MetaDeleteEntityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.MetaEntity;
      reader.readMessage(value,proto.meta.MetaEntity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaDeleteEntityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaDeleteEntityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaDeleteEntityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaDeleteEntityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.MetaEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetaEntity entity = 1;
 * @return {?proto.meta.MetaEntity}
 */
proto.meta.MetaDeleteEntityResponse.prototype.getEntity = function() {
  return /** @type{?proto.meta.MetaEntity} */ (
    jspb.Message.getWrapperField(this, proto.meta.MetaEntity, 1));
};


/** @param {?proto.meta.MetaEntity|undefined} value */
proto.meta.MetaDeleteEntityResponse.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.MetaDeleteEntityResponse.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.MetaDeleteEntityResponse.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.meta.ValueType = {
  UNKNOWN: 0,
  DOUBLE: 1,
  INT64: 2,
  STRING: 3,
  TIMESTAMP: 4,
  BOOLEAN: 5,
  BYTES: 6,
  KEY: 7,
  UINT64: 8
};

/**
 * @enum {number}
 */
proto.meta.SchemaFieldEditorInfoType = {
  DEFAULT: 0,
  PASSWORD: 1,
  LOOKUP: 2
};

/**
 * @enum {number}
 */
proto.meta.SchemaIndexType = {
  UNSPECIFIED: 0,
  MEMORY: 1
};

goog.object.extend(exports, proto.meta);

