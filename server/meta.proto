syntax = "proto3";

package meta;

import "google/protobuf/timestamp.proto";

message PartitionId {
    string namespace = 1;
}

message PathElement {
    string kind = 1;
    oneof idType {
        int64 id = 2;
        string name = 3;
    }
}

message Key {
    PartitionId partitionId = 1;
    repeated PathElement path = 2;
}

enum ValueType {
    unknown = 0;
    double = 1;
    int64 = 2;
    string = 3;
    timestamp = 4;
    boolean = 5;
    bytes = 6;
    key = 7;
    uint64 = 8;
}

message Value {
    int32 id = 1;
    ValueType type = 2;
    double doubleValue = 3;
    int64 int64Value = 4;
    string stringValue = 5;
    google.protobuf.Timestamp timestampValue = 6;
    bool booleanValue = 7;
    bytes bytesValue = 8;
    Key keyValue = 9;
    uint64 uint64Value = 10;
}

message SchemaField {
    int32 id = 1;
    string name = 2;
    ValueType type = 3;
    string comment = 4;
    SchemaFieldEditorInfo editor = 5;
    bool readonly = 6;
}

enum SchemaFieldEditorInfoType {
    default = 0;
    password = 1;
    lookup = 2;
}

message SchemaFieldEditorInfo {
    string displayName = 1;
    SchemaFieldEditorInfoType type = 2;
    bool editorReadonly = 3;
    string foreignType = 4;
}

message SchemaKindEditor {
    string singular = 1;
    string plural = 2;
}

message SchemaKind {
    repeated SchemaField fields = 2;
    SchemaKindEditor editor = 3;
    repeated SchemaIndex indexes = 4;
    repeated string ancestors = 5; // TODO: unused
}

message SchemaIndex {
    string name = 1;
    SchemaIndexType type = 2;
    oneof value {
        SchemaComputedIndex computed = 3;
        string field = 4;
    }
}

enum SchemaIndexType {
    unspecified = 0;
    memory = 1;
}

message SchemaComputedIndex {
    oneof algorithm {
        SchemaComputedIndexFnv64a fnv64a = 1;
        SchemaComputedIndexFnv64aPair fnv64a_pair = 2;
    }
}

message SchemaComputedIndexFnv64a {
    string field = 1;
}

message SchemaComputedIndexFnv64aPair {
    string field1 = 1;
    string field2 = 2;
}

message Schema {
    string name = 1;
    map<string, SchemaKind> kinds = 2;
}

message GetSchemaRequest {
}

message GetSchemaResponse {
    Schema schema = 1;
}

message MetaListEntitiesRequest {
    bytes start = 1;
    // a limit of 0 or lower indicates no limit to the number of entities returned
    uint32 limit = 2;
    string kindName = 3;
}

message MetaListEntitiesResponse {
    bytes next = 1;
    bool moreResults = 2;
    repeated MetaEntity entities = 3;
}

message MetaEntity {
    Key key = 1;
    repeated Value values = 2;
}

message GetDefaultPartitionIdRequest {
}

message GetDefaultPartitionIdResponse {
    string namespace = 1;
}

message MetaGetEntityRequest {
    Key key = 1;
    string kindName = 2;
}

message MetaGetEntityResponse {
    MetaEntity entity = 1;
}

message MetaUpdateEntityRequest {
    MetaEntity entity = 1;
}

message MetaUpdateEntityResponse {
    MetaEntity entity = 1;
}

message MetaCreateEntityRequest {
    MetaEntity entity = 1;
    string kindName = 2;
}

message MetaCreateEntityResponse {
    MetaEntity entity = 1;
}

message MetaDeleteEntityRequest {
    Key key = 1;
    string kindName = 2;
}

message MetaDeleteEntityResponse {
    MetaEntity entity = 1;
}

service ConfigstoreMetaService {
    rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse);
    rpc MetaList(MetaListEntitiesRequest) returns (MetaListEntitiesResponse);
    rpc MetaGet(MetaGetEntityRequest) returns (MetaGetEntityResponse);
    rpc MetaUpdate(MetaUpdateEntityRequest) returns (MetaUpdateEntityResponse);
    rpc MetaCreate(MetaCreateEntityRequest) returns (MetaCreateEntityResponse);
    rpc MetaDelete(MetaDeleteEntityRequest) returns (MetaDeleteEntityResponse);
    rpc GetDefaultPartitionId(GetDefaultPartitionIdRequest) returns (GetDefaultPartitionIdResponse);
    rpc ApplyTransaction(MetaTransaction) returns (MetaTransactionResult);
    rpc WatchTransactions(WatchTransactionsRequest) returns (stream WatchTransactionsResponse);
}

// =======

message MetaTransaction {
    repeated MetaOperation operations = 1;
    string description = 2;
}

message MetaOperation {
    oneof operation {
        MetaListEntitiesRequest listRequest = 1;
        MetaGetEntityRequest getRequest = 2;
        MetaUpdateEntityRequest updateRequest = 3;
        MetaCreateEntityRequest createRequest = 4;
        MetaDeleteEntityRequest deleteRequest = 5;
    }
}

message MetaTransactionResult {
    repeated MetaOperationResult operationResults = 1;
}

message MetaOperationResultError {
    string errorMessage = 1;
}

message MetaOperationResult {
    MetaOperationResultError error = 1;
    oneof operation {
        MetaListEntitiesResponse listResponse = 2;
        MetaGetEntityResponse getResponse = 3;
        MetaUpdateEntityResponse updateResponse = 4;
        MetaCreateEntityResponse createResponse = 5;
        MetaDeleteEntityResponse deleteResponse = 6;
    }
}

message WatchTransactionsRequest {

}

message WatchTransactionsResponse {
    MetaTransactionBatch batch = 1;
}

message MetaTransactionRecord {
    repeated Key mutatedKeys = 1;
    repeated Key deletedKeys = 2;
    google.protobuf.Timestamp dateSubmitted = 3;
    google.protobuf.Timestamp dateCreated = 4;
    string description = 5;
    string id = 6;
}

message MetaTransactionBatch {
    repeated MetaEntity mutatedEntities = 1;
    repeated Key deletedKeys = 2;
    string description = 3;
}