/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
/* eslint-disable */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.meta.Field', null, global);
goog.exportSymbol('proto.meta.FieldEditorInfo', null, global);
goog.exportSymbol('proto.meta.FieldEditorInfoType', null, global);
goog.exportSymbol('proto.meta.GetSchemaRequest', null, global);
goog.exportSymbol('proto.meta.GetSchemaResponse', null, global);
goog.exportSymbol('proto.meta.Key', null, global);
goog.exportSymbol('proto.meta.Kind', null, global);
goog.exportSymbol('proto.meta.KindEditor', null, global);
goog.exportSymbol('proto.meta.MetaEntity', null, global);
goog.exportSymbol('proto.meta.MetaListEntitiesRequest', null, global);
goog.exportSymbol('proto.meta.MetaListEntitiesResponse', null, global);
goog.exportSymbol('proto.meta.PartitionId', null, global);
goog.exportSymbol('proto.meta.PathElement', null, global);
goog.exportSymbol('proto.meta.Schema', null, global);
goog.exportSymbol('proto.meta.Value', null, global);
goog.exportSymbol('proto.meta.ValueType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.PartitionId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.PartitionId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.PartitionId.displayName = 'proto.meta.PartitionId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.PartitionId.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.PartitionId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.PartitionId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.PartitionId.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.PartitionId}
 */
proto.meta.PartitionId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.PartitionId;
  return proto.meta.PartitionId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.PartitionId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.PartitionId}
 */
proto.meta.PartitionId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.PartitionId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.PartitionId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.PartitionId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.PartitionId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.meta.PartitionId.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.PartitionId.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.PathElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.meta.PathElement.oneofGroups_);
};
goog.inherits(proto.meta.PathElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.PathElement.displayName = 'proto.meta.PathElement';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.meta.PathElement.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.meta.PathElement.IdtypeCase = {
  IDTYPE_NOT_SET: 0,
  ID: 2,
  NAME: 3
};

/**
 * @return {proto.meta.PathElement.IdtypeCase}
 */
proto.meta.PathElement.prototype.getIdtypeCase = function() {
  return /** @type {proto.meta.PathElement.IdtypeCase} */(jspb.Message.computeOneofCase(this, proto.meta.PathElement.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.PathElement.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.PathElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.PathElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.PathElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.PathElement}
 */
proto.meta.PathElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.PathElement;
  return proto.meta.PathElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.PathElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.PathElement}
 */
proto.meta.PathElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.PathElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.PathElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.PathElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.PathElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string kind = 1;
 * @return {string}
 */
proto.meta.PathElement.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.PathElement.prototype.setKind = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.meta.PathElement.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.meta.PathElement.prototype.setId = function(value) {
  jspb.Message.setOneofField(this, 2, proto.meta.PathElement.oneofGroups_[0], value);
};


proto.meta.PathElement.prototype.clearId = function() {
  jspb.Message.setOneofField(this, 2, proto.meta.PathElement.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.PathElement.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.meta.PathElement.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meta.PathElement.prototype.setName = function(value) {
  jspb.Message.setOneofField(this, 3, proto.meta.PathElement.oneofGroups_[0], value);
};


proto.meta.PathElement.prototype.clearName = function() {
  jspb.Message.setOneofField(this, 3, proto.meta.PathElement.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.PathElement.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.Key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meta.Key.repeatedFields_, null);
};
goog.inherits(proto.meta.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.Key.displayName = 'proto.meta.Key';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meta.Key.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.Key.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.Key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.Key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Key.toObject = function(includeInstance, msg) {
  var f, obj = {
    partitionid: (f = msg.getPartitionid()) && proto.meta.PartitionId.toObject(includeInstance, f),
    pathList: jspb.Message.toObjectList(msg.getPathList(),
    proto.meta.PathElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.Key}
 */
proto.meta.Key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.Key;
  return proto.meta.Key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.Key}
 */
proto.meta.Key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.PartitionId;
      reader.readMessage(value,proto.meta.PartitionId.deserializeBinaryFromReader);
      msg.setPartitionid(value);
      break;
    case 2:
      var value = new proto.meta.PathElement;
      reader.readMessage(value,proto.meta.PathElement.deserializeBinaryFromReader);
      msg.addPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.Key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartitionid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.PartitionId.serializeBinaryToWriter
    );
  }
  f = message.getPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.meta.PathElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional PartitionId partitionId = 1;
 * @return {?proto.meta.PartitionId}
 */
proto.meta.Key.prototype.getPartitionid = function() {
  return /** @type{?proto.meta.PartitionId} */ (
    jspb.Message.getWrapperField(this, proto.meta.PartitionId, 1));
};


/** @param {?proto.meta.PartitionId|undefined} value */
proto.meta.Key.prototype.setPartitionid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.Key.prototype.clearPartitionid = function() {
  this.setPartitionid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.Key.prototype.hasPartitionid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PathElement path = 2;
 * @return {!Array<!proto.meta.PathElement>}
 */
proto.meta.Key.prototype.getPathList = function() {
  return /** @type{!Array<!proto.meta.PathElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meta.PathElement, 2));
};


/** @param {!Array<!proto.meta.PathElement>} value */
proto.meta.Key.prototype.setPathList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.meta.PathElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meta.PathElement}
 */
proto.meta.Key.prototype.addPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.meta.PathElement, opt_index);
};


proto.meta.Key.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.Value.displayName = 'proto.meta.Value';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    doublevalue: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    int64value: jspb.Message.getFieldWithDefault(msg, 4, 0),
    stringvalue: jspb.Message.getFieldWithDefault(msg, 5, ""),
    timestampvalue: msg.getTimestampvalue_asB64(),
    booleanvalue: jspb.Message.getFieldWithDefault(msg, 7, false),
    bytesvalue: msg.getBytesvalue_asB64(),
    keyvalue: (f = msg.getKeyvalue()) && proto.meta.Key.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.Value}
 */
proto.meta.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.Value;
  return proto.meta.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.Value}
 */
proto.meta.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.meta.ValueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoublevalue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64value(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTimestampvalue(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBooleanvalue(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesvalue(value);
      break;
    case 9:
      var value = new proto.meta.Key;
      reader.readMessage(value,proto.meta.Key.deserializeBinaryFromReader);
      msg.setKeyvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDoublevalue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getInt64value();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getStringvalue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTimestampvalue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBooleanvalue();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getBytesvalue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getKeyvalue();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.meta.Key.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.meta.Value.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.meta.Value.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ValueType type = 2;
 * @return {!proto.meta.ValueType}
 */
proto.meta.Value.prototype.getType = function() {
  return /** @type {!proto.meta.ValueType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.meta.ValueType} value */
proto.meta.Value.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional double doubleValue = 3;
 * @return {number}
 */
proto.meta.Value.prototype.getDoublevalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.meta.Value.prototype.setDoublevalue = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int64 int64Value = 4;
 * @return {number}
 */
proto.meta.Value.prototype.getInt64value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.meta.Value.prototype.setInt64value = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string stringValue = 5;
 * @return {string}
 */
proto.meta.Value.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.meta.Value.prototype.setStringvalue = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes timestampValue = 6;
 * @return {!(string|Uint8Array)}
 */
proto.meta.Value.prototype.getTimestampvalue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes timestampValue = 6;
 * This is a type-conversion wrapper around `getTimestampvalue()`
 * @return {string}
 */
proto.meta.Value.prototype.getTimestampvalue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTimestampvalue()));
};


/**
 * optional bytes timestampValue = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTimestampvalue()`
 * @return {!Uint8Array}
 */
proto.meta.Value.prototype.getTimestampvalue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTimestampvalue()));
};


/** @param {!(string|Uint8Array)} value */
proto.meta.Value.prototype.setTimestampvalue = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bool booleanValue = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meta.Value.prototype.getBooleanvalue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.meta.Value.prototype.setBooleanvalue = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bytes bytesValue = 8;
 * @return {!(string|Uint8Array)}
 */
proto.meta.Value.prototype.getBytesvalue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes bytesValue = 8;
 * This is a type-conversion wrapper around `getBytesvalue()`
 * @return {string}
 */
proto.meta.Value.prototype.getBytesvalue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesvalue()));
};


/**
 * optional bytes bytesValue = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesvalue()`
 * @return {!Uint8Array}
 */
proto.meta.Value.prototype.getBytesvalue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesvalue()));
};


/** @param {!(string|Uint8Array)} value */
proto.meta.Value.prototype.setBytesvalue = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional Key keyValue = 9;
 * @return {?proto.meta.Key}
 */
proto.meta.Value.prototype.getKeyvalue = function() {
  return /** @type{?proto.meta.Key} */ (
    jspb.Message.getWrapperField(this, proto.meta.Key, 9));
};


/** @param {?proto.meta.Key|undefined} value */
proto.meta.Value.prototype.setKeyvalue = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.meta.Value.prototype.clearKeyvalue = function() {
  this.setKeyvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.Value.prototype.hasKeyvalue = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.Field = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.Field, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.Field.displayName = 'proto.meta.Field';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.Field.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.Field.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.Field} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Field.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    comment: jspb.Message.getFieldWithDefault(msg, 4, ""),
    editor: (f = msg.getEditor()) && proto.meta.FieldEditorInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.Field}
 */
proto.meta.Field.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.Field;
  return proto.meta.Field.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.Field} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.Field}
 */
proto.meta.Field.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.meta.ValueType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 5:
      var value = new proto.meta.FieldEditorInfo;
      reader.readMessage(value,proto.meta.FieldEditorInfo.deserializeBinaryFromReader);
      msg.setEditor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.Field.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.Field.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.Field} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Field.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEditor();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.meta.FieldEditorInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.meta.Field.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.meta.Field.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.meta.Field.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meta.Field.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ValueType type = 3;
 * @return {!proto.meta.ValueType}
 */
proto.meta.Field.prototype.getType = function() {
  return /** @type {!proto.meta.ValueType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.meta.ValueType} value */
proto.meta.Field.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string comment = 4;
 * @return {string}
 */
proto.meta.Field.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.meta.Field.prototype.setComment = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional FieldEditorInfo editor = 5;
 * @return {?proto.meta.FieldEditorInfo}
 */
proto.meta.Field.prototype.getEditor = function() {
  return /** @type{?proto.meta.FieldEditorInfo} */ (
    jspb.Message.getWrapperField(this, proto.meta.FieldEditorInfo, 5));
};


/** @param {?proto.meta.FieldEditorInfo|undefined} value */
proto.meta.Field.prototype.setEditor = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.meta.Field.prototype.clearEditor = function() {
  this.setEditor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.Field.prototype.hasEditor = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.FieldEditorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.FieldEditorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.FieldEditorInfo.displayName = 'proto.meta.FieldEditorInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.FieldEditorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.FieldEditorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.FieldEditorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.FieldEditorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    displayname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    readonly: jspb.Message.getFieldWithDefault(msg, 3, false),
    foreigntype: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.FieldEditorInfo}
 */
proto.meta.FieldEditorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.FieldEditorInfo;
  return proto.meta.FieldEditorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.FieldEditorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.FieldEditorInfo}
 */
proto.meta.FieldEditorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayname(value);
      break;
    case 2:
      var value = /** @type {!proto.meta.FieldEditorInfoType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadonly(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setForeigntype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.FieldEditorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.FieldEditorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.FieldEditorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.FieldEditorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisplayname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getReadonly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getForeigntype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string displayName = 1;
 * @return {string}
 */
proto.meta.FieldEditorInfo.prototype.getDisplayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.FieldEditorInfo.prototype.setDisplayname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FieldEditorInfoType type = 2;
 * @return {!proto.meta.FieldEditorInfoType}
 */
proto.meta.FieldEditorInfo.prototype.getType = function() {
  return /** @type {!proto.meta.FieldEditorInfoType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.meta.FieldEditorInfoType} value */
proto.meta.FieldEditorInfo.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool readonly = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meta.FieldEditorInfo.prototype.getReadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.meta.FieldEditorInfo.prototype.setReadonly = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string foreignType = 4;
 * @return {string}
 */
proto.meta.FieldEditorInfo.prototype.getForeigntype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.meta.FieldEditorInfo.prototype.setForeigntype = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.KindEditor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.KindEditor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.KindEditor.displayName = 'proto.meta.KindEditor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.KindEditor.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.KindEditor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.KindEditor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.KindEditor.toObject = function(includeInstance, msg) {
  var f, obj = {
    singular: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plural: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.KindEditor}
 */
proto.meta.KindEditor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.KindEditor;
  return proto.meta.KindEditor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.KindEditor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.KindEditor}
 */
proto.meta.KindEditor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSingular(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlural(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.KindEditor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.KindEditor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.KindEditor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.KindEditor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSingular();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlural();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string singular = 1;
 * @return {string}
 */
proto.meta.KindEditor.prototype.getSingular = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.KindEditor.prototype.setSingular = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string plural = 2;
 * @return {string}
 */
proto.meta.KindEditor.prototype.getPlural = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.meta.KindEditor.prototype.setPlural = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.Kind = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meta.Kind.repeatedFields_, null);
};
goog.inherits(proto.meta.Kind, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.Kind.displayName = 'proto.meta.Kind';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meta.Kind.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.Kind.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.Kind.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.Kind} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Kind.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.meta.Field.toObject, includeInstance),
    editor: (f = msg.getEditor()) && proto.meta.KindEditor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.Kind}
 */
proto.meta.Kind.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.Kind;
  return proto.meta.Kind.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.Kind} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.Kind}
 */
proto.meta.Kind.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.meta.Field;
      reader.readMessage(value,proto.meta.Field.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    case 3:
      var value = new proto.meta.KindEditor;
      reader.readMessage(value,proto.meta.KindEditor.deserializeBinaryFromReader);
      msg.setEditor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.Kind.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.Kind.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.Kind} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Kind.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.meta.Field.serializeBinaryToWriter
    );
  }
  f = message.getEditor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.meta.KindEditor.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meta.Kind.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.Kind.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Field fields = 2;
 * @return {!Array<!proto.meta.Field>}
 */
proto.meta.Kind.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.meta.Field>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meta.Field, 2));
};


/** @param {!Array<!proto.meta.Field>} value */
proto.meta.Kind.prototype.setFieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.meta.Field=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meta.Field}
 */
proto.meta.Kind.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.meta.Field, opt_index);
};


proto.meta.Kind.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};


/**
 * optional KindEditor editor = 3;
 * @return {?proto.meta.KindEditor}
 */
proto.meta.Kind.prototype.getEditor = function() {
  return /** @type{?proto.meta.KindEditor} */ (
    jspb.Message.getWrapperField(this, proto.meta.KindEditor, 3));
};


/** @param {?proto.meta.KindEditor|undefined} value */
proto.meta.Kind.prototype.setEditor = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.meta.Kind.prototype.clearEditor = function() {
  this.setEditor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.Kind.prototype.hasEditor = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meta.Schema.repeatedFields_, null);
};
goog.inherits(proto.meta.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.Schema.displayName = 'proto.meta.Schema';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meta.Schema.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    kindsList: jspb.Message.toObjectList(msg.getKindsList(),
    proto.meta.Kind.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.Schema}
 */
proto.meta.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.Schema;
  return proto.meta.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.Schema}
 */
proto.meta.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.meta.Kind;
      reader.readMessage(value,proto.meta.Kind.deserializeBinaryFromReader);
      msg.addKinds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKindsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.meta.Kind.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.meta.Schema.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.meta.Schema.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Kind kinds = 2;
 * @return {!Array<!proto.meta.Kind>}
 */
proto.meta.Schema.prototype.getKindsList = function() {
  return /** @type{!Array<!proto.meta.Kind>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meta.Kind, 2));
};


/** @param {!Array<!proto.meta.Kind>} value */
proto.meta.Schema.prototype.setKindsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.meta.Kind=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meta.Kind}
 */
proto.meta.Schema.prototype.addKinds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.meta.Kind, opt_index);
};


proto.meta.Schema.prototype.clearKindsList = function() {
  this.setKindsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.GetSchemaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.GetSchemaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.GetSchemaRequest.displayName = 'proto.meta.GetSchemaRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.GetSchemaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.GetSchemaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.GetSchemaRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.GetSchemaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.GetSchemaRequest}
 */
proto.meta.GetSchemaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.GetSchemaRequest;
  return proto.meta.GetSchemaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.GetSchemaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.GetSchemaRequest}
 */
proto.meta.GetSchemaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.GetSchemaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.GetSchemaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.GetSchemaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.GetSchemaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.GetSchemaResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.GetSchemaResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.GetSchemaResponse.displayName = 'proto.meta.GetSchemaResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.GetSchemaResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.GetSchemaResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.GetSchemaResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.GetSchemaResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    schema: (f = msg.getSchema()) && proto.meta.Schema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.GetSchemaResponse}
 */
proto.meta.GetSchemaResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.GetSchemaResponse;
  return proto.meta.GetSchemaResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.GetSchemaResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.GetSchemaResponse}
 */
proto.meta.GetSchemaResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.Schema;
      reader.readMessage(value,proto.meta.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.GetSchemaResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.GetSchemaResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.GetSchemaResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.GetSchemaResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.Schema.serializeBinaryToWriter
    );
  }
};


/**
 * optional Schema schema = 1;
 * @return {?proto.meta.Schema}
 */
proto.meta.GetSchemaResponse.prototype.getSchema = function() {
  return /** @type{?proto.meta.Schema} */ (
    jspb.Message.getWrapperField(this, proto.meta.Schema, 1));
};


/** @param {?proto.meta.Schema|undefined} value */
proto.meta.GetSchemaResponse.prototype.setSchema = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.GetSchemaResponse.prototype.clearSchema = function() {
  this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.GetSchemaResponse.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaListEntitiesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meta.MetaListEntitiesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaListEntitiesRequest.displayName = 'proto.meta.MetaListEntitiesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaListEntitiesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaListEntitiesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaListEntitiesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaListEntitiesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: msg.getStart_asB64(),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    kindname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaListEntitiesRequest}
 */
proto.meta.MetaListEntitiesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaListEntitiesRequest;
  return proto.meta.MetaListEntitiesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaListEntitiesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaListEntitiesRequest}
 */
proto.meta.MetaListEntitiesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKindname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaListEntitiesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaListEntitiesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaListEntitiesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaListEntitiesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getKindname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes start = 1;
 * @return {!(string|Uint8Array)}
 */
proto.meta.MetaListEntitiesRequest.prototype.getStart = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes start = 1;
 * This is a type-conversion wrapper around `getStart()`
 * @return {string}
 */
proto.meta.MetaListEntitiesRequest.prototype.getStart_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStart()));
};


/**
 * optional bytes start = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStart()`
 * @return {!Uint8Array}
 */
proto.meta.MetaListEntitiesRequest.prototype.getStart_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStart()));
};


/** @param {!(string|Uint8Array)} value */
proto.meta.MetaListEntitiesRequest.prototype.setStart = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.meta.MetaListEntitiesRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.meta.MetaListEntitiesRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string kindName = 3;
 * @return {string}
 */
proto.meta.MetaListEntitiesRequest.prototype.getKindname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.meta.MetaListEntitiesRequest.prototype.setKindname = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaListEntitiesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meta.MetaListEntitiesResponse.repeatedFields_, null);
};
goog.inherits(proto.meta.MetaListEntitiesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaListEntitiesResponse.displayName = 'proto.meta.MetaListEntitiesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meta.MetaListEntitiesResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaListEntitiesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaListEntitiesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaListEntitiesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaListEntitiesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    next: msg.getNext_asB64(),
    moreresults: jspb.Message.getFieldWithDefault(msg, 2, false),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.meta.MetaEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaListEntitiesResponse}
 */
proto.meta.MetaListEntitiesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaListEntitiesResponse;
  return proto.meta.MetaListEntitiesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaListEntitiesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaListEntitiesResponse}
 */
proto.meta.MetaListEntitiesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNext(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMoreresults(value);
      break;
    case 3:
      var value = new proto.meta.MetaEntity;
      reader.readMessage(value,proto.meta.MetaEntity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaListEntitiesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaListEntitiesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaListEntitiesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaListEntitiesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMoreresults();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.meta.MetaEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes next = 1;
 * @return {!(string|Uint8Array)}
 */
proto.meta.MetaListEntitiesResponse.prototype.getNext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes next = 1;
 * This is a type-conversion wrapper around `getNext()`
 * @return {string}
 */
proto.meta.MetaListEntitiesResponse.prototype.getNext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNext()));
};


/**
 * optional bytes next = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNext()`
 * @return {!Uint8Array}
 */
proto.meta.MetaListEntitiesResponse.prototype.getNext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNext()));
};


/** @param {!(string|Uint8Array)} value */
proto.meta.MetaListEntitiesResponse.prototype.setNext = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool moreResults = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.meta.MetaListEntitiesResponse.prototype.getMoreresults = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.meta.MetaListEntitiesResponse.prototype.setMoreresults = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated MetaEntity entities = 3;
 * @return {!Array<!proto.meta.MetaEntity>}
 */
proto.meta.MetaListEntitiesResponse.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.meta.MetaEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meta.MetaEntity, 3));
};


/** @param {!Array<!proto.meta.MetaEntity>} value */
proto.meta.MetaListEntitiesResponse.prototype.setEntitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.meta.MetaEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meta.MetaEntity}
 */
proto.meta.MetaListEntitiesResponse.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.meta.MetaEntity, opt_index);
};


proto.meta.MetaListEntitiesResponse.prototype.clearEntitiesList = function() {
  this.setEntitiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meta.MetaEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meta.MetaEntity.repeatedFields_, null);
};
goog.inherits(proto.meta.MetaEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.meta.MetaEntity.displayName = 'proto.meta.MetaEntity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meta.MetaEntity.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meta.MetaEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.meta.MetaEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meta.MetaEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.meta.Key.toObject(includeInstance, f),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.meta.Value.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meta.MetaEntity}
 */
proto.meta.MetaEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meta.MetaEntity;
  return proto.meta.MetaEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meta.MetaEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meta.MetaEntity}
 */
proto.meta.MetaEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meta.Key;
      reader.readMessage(value,proto.meta.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.meta.Value;
      reader.readMessage(value,proto.meta.Value.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meta.MetaEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meta.MetaEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meta.MetaEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meta.MetaEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.meta.Key.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.meta.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Key key = 1;
 * @return {?proto.meta.Key}
 */
proto.meta.MetaEntity.prototype.getKey = function() {
  return /** @type{?proto.meta.Key} */ (
    jspb.Message.getWrapperField(this, proto.meta.Key, 1));
};


/** @param {?proto.meta.Key|undefined} value */
proto.meta.MetaEntity.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.meta.MetaEntity.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.meta.MetaEntity.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Value values = 2;
 * @return {!Array<!proto.meta.Value>}
 */
proto.meta.MetaEntity.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.meta.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meta.Value, 2));
};


/** @param {!Array<!proto.meta.Value>} value */
proto.meta.MetaEntity.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.meta.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meta.Value}
 */
proto.meta.MetaEntity.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.meta.Value, opt_index);
};


proto.meta.MetaEntity.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * @enum {number}
 */
proto.meta.ValueType = {
  TYPEDOUBLE: 0,
  TYPEINT64: 1,
  TYPESTRING: 2,
  TYPETIMESTAMP: 3,
  TYPEBOOLEAN: 4,
  TYPEBYTES: 5,
  TYPEKEY: 6
};

/**
 * @enum {number}
 */
proto.meta.FieldEditorInfoType = {
  DEFAULT: 0,
  PASSWORD: 1,
  LOOKUP: 2
};

goog.object.extend(exports, proto.meta);

